# Learn more about services, parameters and containers at
# http://symfony.com/doc/current/service_container.html
parameters:
#    parameter_name: value

services:
#    service_name:
#        class: AppBundle\Directory\ClassName
#        arguments: ["@another_service_name", "plain_value", "%parameter_name%"]
    twig.extension.intl:
        class: Twig_Extensions_Extension_Intl #la lib a été rajoutée dans le dossier vendor/twig/lib/twig/extensions/extention
        tags:
            - { name: twig.extension}

    app.service.slug:
        class: AppBundle\Service\SlugService

    app.service.subscriber.movieformsubscriber:
        class: AppBundle\Service\Subscriber\MovieFormSubscriber
        arguments: [  ]
        tags:
            - { name: kernel.event_subscriber } #subscripteur

    app.service.subscriber.actorformsubscriber:
         class: AppBundle\Service\Subscriber\ActorFormSubscriber
         arguments: [  ]
         tags:
             - { name: kernel.event_subscriber } #subscripteur


    app.service.listener.category:
        class: AppBundle\Service\Listener\CategoryListener
        arguments: [ "@app.service.slug" ]
        tags:
            - { name: doctrine.orm.entity_listener}

    app.service.listener.movie:
        class: AppBundle\Service\Listener\MovieListener
        arguments: [ "@app.service.slug", "%upload_dir%" ]
        tags:
            - { name: doctrine.orm.entity_listener}

    app.service.listener.actor:
        class: AppBundle\Service\Listener\ActorListener
        arguments: [ "@app.service.slug", "%upload_dir%" ]
        tags:
            - { name: doctrine.orm.entity_listener}


    app.service.panier.panierservice:
            class: AppBundle\Service\Panier\PanierService
            arguments: ["@session", "@doctrine"]


    app.service.twig.functionextension:
        class: AppBundle\Service\Twig\FunctionExtension
        arguments: [ "@twig", "%locales%", "@request_stack", "@router", "@app.service.panier.panierservice"  ]
        tags:
            - { name: twig.extension}


    app.service.handler.formhandler:
        class: AppBundle\Service\Handler\Formhandler
        arguments: ["@doctrine" ]

    app.service.handler.moviehandler:
        class: AppBundle\Service\Handler\Moviehandler
        arguments: ["@doctrine", "@app.service.utils.upload"]

    app.service.handler.userhandler:
        class: AppBundle\Service\Handler\Userhandler
        arguments: ["@doctrine", "@security.password_encoder", "@mailer"]

    app.service.utils.upload:
        class: AppBundle\Service\Utils\UploadUtils
        arguments: ["@app.service.utils.string", "%upload_dir%" ]

    app.service.utils.string:
        class: AppBundle\Service\Utils\StringUtils

    app.service.handler.actorhandler:
        class: AppBundle\Service\Handler\Actorhandler
        arguments: ["@doctrine", "@app.service.utils.upload"]

    app.service.form.selectform:
            class: AppBundle\Form\MovieSearchType
            arguments: ["@doctrine" ]
            tags:
                - { name: form.type }

    app.service.subscriber.authentificationsubscriber:
            class: AppBundle\Service\Subscriber\AuthentificationSubscriber
            arguments: ["@doctrine", "@session", "%max_fail_auth%" ]
            tags:
                    - { name: kernel.event_subscriber } #subscripteur



    #subscriber exécuter à chaque requête
    app.service.subscriber.kernel.events:
        class:  AppBundle\Service\Subscriber\KernelEventSubscriber
        arguments: ["@Twig"]
        tags:
                - { name: kernel.event_subscriber }



#services pour le json nécéssaire au retour ajax
    app.serializer.normalizer.object:
        class: Symfony\Component\Serializer\Normalizer\ObjectNormalizer
        tags:
            - {name: serializer.normalizer}
    app.serializer.encoder.json:
        class: Symfony\Component\Serializer\Encoder\JsonEncoder
        tags:
            - {name: serializer.encoder}
    app.serializer.encoder.xml:
        class: Symfony\Component\Serializer\Encoder\XmlEncoder
        tags:
            - {name: serializer.encoder}
    app.serializer:
        class: AppBundle\Service\Serializer\AppSerializer
        arguments: ['@app.serializer.normalizer.object', ['@app.serializer.encoder.json', '@app.serializer.encoder.xml']]

    #service pour le souscripteur qu'on a créé de toute piece
    app.service.subscriber.orderevents:
        class:  AppBundle\Service\Subscriber\OrderEventsSubscriber
        arguments: ["@doctrine", "@knp_snappy.pdf", "@Twig", "@app.service.panier.panierservice"]
        tags:
            - { name: kernel.event_subscriber}